package edf.simdiasca.algos;

import java.io.File;

import edf.simdiasca.ErlangConstants;
import edf.simdiasca.exec.WritePopulationForSimdiascaExec;
import genlab.core.GenLab;
import genlab.core.commons.FileUtils;
import genlab.core.exec.IExecution;
import genlab.core.model.exec.IAlgoExecution;
import genlab.core.model.instance.AlgoInstance;
import genlab.core.model.meta.BasicAlgo;
import genlab.core.model.meta.ExistingAlgoCategories;
import genlab.core.model.meta.InputOutput;
import genlab.core.model.meta.basics.flowtypes.AnythingFlowType;
import genlab.core.model.meta.basics.flowtypes.FileFlowType;
import genlab.core.parameters.FileParameter;
import genlab.core.parameters.TextParameter;
import genlab.populations.bo.IPopulation;
import genlab.populations.flowtypes.PopulationFlowType;

public class WritePopulationForSimdiascaAlgo extends BasicAlgo {

	
	public static final FileParameter PARAMETER_FILE = new FileParameter(
			"param_file", 
			"file", 
			"the file into which write the result", 
			FileUtils.getHomeDirectoryFile()
			);
	
	public static final TextParameter PARAMETER_HEADER = new TextParameter(
			"param_header", 
			"header", 
			"the header to display; you can use a javascript expression", 
			"\""+ErlangConstants.ERLANG_COMMENT+" generated by GenLab "+GenLab.getVersionString()+"\""
			);

	public static final TextParameter PARAMETER_FORMATTING = new TextParameter(
			"param_formatting", 
			"formatting", 
			"the formatting used to format the output; the variable \"agent_type\" will be defined, as well as the attribute ids of each agent type.",
			// example of switch to help the user
			"switch (agent_type) {\n"
			+"	case \"mytype1\": return \"create_class(class_\".$mytype).\"\\n"
			+"		break;\n"
			+"	}"
			);
	
	public static final TextParameter PARAMETER_FOOTER = new TextParameter(
			"param_footer", 
			"footer", 
			"the footer to display; you can use a javascript expression", 
			"\""+ErlangConstants.ERLANG_COMMENT+" end of the file\""
			);
	
	public static final InputOutput<IPopulation> INPUT_POPULATION = new InputOutput<IPopulation>(
			PopulationFlowType.SINGLETON, 
			"in_pop", 
			"population", 
			"the population to write as a file"
			);
	

	public static final InputOutput<Object> INPUT_ANYTHING = new InputOutput<Object>(
			AnythingFlowType.SINGLETON, 
			"in_anything", 
			"variables", 
			"any input that could be usefull as a variable in the javascript expressions",
			true,
			true
			);

	public static final InputOutput<File> OUTPUT_FILE = new InputOutput<File>(
			FileFlowType.SINGLETON, 
			"out_file", 
			"file", 
			"the file to save the thing to"
	);
	
	
	public WritePopulationForSimdiascaAlgo() {
		super(
				"write for Simdisca", 
				"write a population in a simdiasca file format", 
				ExistingAlgoCategories.WRITER_POPULATION, 
				null, 
				null
				);
		
		registerParameter(PARAMETER_FILE);
		registerParameter(PARAMETER_HEADER);
		registerParameter(PARAMETER_FORMATTING);
		registerParameter(PARAMETER_FOOTER);
		
		inputs.add(INPUT_POPULATION);
		inputs.add(INPUT_ANYTHING);
		
		outputs.add(OUTPUT_FILE);
	}

	public WritePopulationForSimdiascaAlgo(String name, String description,
			String categoryId) {
		
		super(name, description, categoryId);
		// TODO Auto-generated constructor stub
	}

	@Override
	public IAlgoExecution createExec(IExecution execution,
			AlgoInstance algoInstance) {
		return new WritePopulationForSimdiascaExec(execution, algoInstance);
	}

}
