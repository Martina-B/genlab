package edf.simdiasca.exec;

import edf.simdiasca.ErlangConstants;
import edf.simdiasca.algos.WritePopulationForSimdiascaAlgo;
import genlab.arithmetics.javaScripting.JavaScriptingExpressionParser;
import genlab.core.GenLab;
import genlab.core.exec.IExecution;
import genlab.core.model.exec.AbstractAlgoExecutionOneshot;
import genlab.core.model.exec.ComputationProgressWithSteps;
import genlab.core.model.exec.ComputationResult;
import genlab.core.model.exec.ComputationState;
import genlab.core.model.instance.IAlgoInstance;
import genlab.core.model.instance.IConnection;
import genlab.populations.bo.Attribute;
import genlab.populations.bo.IAgent;
import genlab.populations.bo.IAgentType;
import genlab.populations.bo.IPopulation;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintStream;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

public class WritePopulationForSimdiascaExec extends
		AbstractAlgoExecutionOneshot {

	
	public WritePopulationForSimdiascaExec(
			IExecution exec,
			IAlgoInstance algoInst
			) {
		super(exec, algoInst, new ComputationProgressWithSteps());
		
	}

	@Override
	public long getTimeout() {
		return 500;
	}
	
	protected String java2erlang(Object value) {
		
		if (value instanceof String) {
			StringBuffer sb = new StringBuffer();
			return sb.append("\"").append((String)value).append("\"").toString();
		} else if (value == null) {
			return "nil"; // TODO Erlang for null ???
		} else {
			return value.toString();
		}
	}

	@Override
	public void run() {
		
		progress.setComputationState(ComputationState.STARTED);
		ComputationResult result = new ComputationResult(algoInst, progress, messages);
		setResult(result);
		
		
		// retrieve parameters
		File inputFile = (File)algoInst.getValueForParameter(WritePopulationForSimdiascaAlgo.PARAMETER_FILE);
		String headerTxt = (String)algoInst.getValueForParameter(WritePopulationForSimdiascaAlgo.PARAMETER_HEADER);
		String formattingTxt = (String)algoInst.getValueForParameter(WritePopulationForSimdiascaAlgo.PARAMETER_FORMATTING);
		String footerTxt = (String)algoInst.getValueForParameter(WritePopulationForSimdiascaAlgo.PARAMETER_FOOTER);
		
		// retrieve input data
		IPopulation inputPopulation = (IPopulation)getInputValueForInput(WritePopulationForSimdiascaAlgo.INPUT_POPULATION);
		Map<IConnection,Object> others = getInputValuesForInput(WritePopulationForSimdiascaAlgo.INPUT_ANYTHING);
		
		// post process inputs
		// add input variables
		Map<String,Object> variablesInput = null;
		if (!others.isEmpty()) {
			variablesInput = new HashMap<String, Object>(others.size());
			for (IConnection c: others.keySet()) {
				// publish variables in format: algoname.outputname
				variablesInput.put(
						c.getFrom().getAlgoInstance().getName()+"."+c.getFrom().getName(), 
						others.get(c)
						);
				// simplified version: algoname (if there is only one output)
				if (c.getFrom().getAlgoInstance().getOutputInstances().size() == 1) {
					variablesInput.put(
							c.getFrom().getAlgoInstance().getName(), 
							others.get(c)
							);	
				}
					
			}
		}
		
		// update progress
		progress.setProgressTotal(inputPopulation.getTotalAgentsCount());
		
		// create printstream
		PrintStream ps ;
		try {
			ps = new PrintStream(inputFile);
		} catch (FileNotFoundException e) {
			messages.errorUser("unable to write inside file "+inputFile+": "+e.getLocalizedMessage(), getClass(), e);
			progress.setComputationState(ComputationState.FINISHED_FAILURE);
			return;
		}
		
		try {
			
			Map<IAgent,String> agent2exportId = new HashMap<IAgent, String>(inputPopulation.getTotalAgentsCount());
			
			// write header
			ps.print(ErlangConstants.ERLANG_COMMENT);
			JavaScriptingExpressionParser jsParser = new JavaScriptingExpressionParser();
			ps.print(" file generated by GenLab v");
			ps.println(GenLab.getVersionString());
			ps.print(ErlangConstants.ERLANG_COMMENT);
			ps.println(new Date());
			ps.println();
			try {
				ps.println(jsParser.evaluate(headerTxt, messages, variablesInput));
			} catch (RuntimeException e) {
				messages.errorUser("error while evaluating the header expression: "+e.getLocalizedMessage(), getClass(), e);
				progress.setComputationState(ComputationState.FINISHED_FAILURE);
				return;
			}
			
			int i=0;
			for (IAgentType type: inputPopulation.getPopulationDescription().getNonAbstractAgentTypes()) {
				
				// print the agent type as a comment
				ps.print(ErlangConstants.ERLANG_COMMENT);
				ps.print("agent type: ");
				ps.print(type);
				ps.println();
				ps.print(ErlangConstants.ERLANG_COMMENT);
				ps.print("total count: ");
				ps.print(inputPopulation.getAgentsCount(type));
				ps.println();
				ps.print(ErlangConstants.ERLANG_COMMENT);
				ps.print("attributes are: ");
				ps.print(type.getAllAttributes());
				ps.println();
				
				// convenient String
				String exportType = type.getName().trim().replaceAll(" ", "");
				
				int j=0;
				HashMap<String,Object> variablesForAgent = null;
				for (IAgent agent: inputPopulation.getAgents(type)) {
					
					// create variables for this agent
					if (variablesInput != null) {
						variablesForAgent = new HashMap<String, Object>(variablesInput );
						variablesForAgent.putAll(agent.getValuesOfAttributesAsMap());
					} else {
						variablesForAgent = new HashMap<String, Object>(agent.getValuesOfAttributesAsMap());
					}
					variablesForAgent.put("agent_type", type.getName());
					variablesForAgent.put("id", agent.getId());
					
					// interpret expression
					try {
						ps.println(jsParser.evaluate(formattingTxt, messages, variablesForAgent));
					} catch (RuntimeException e) {
						messages.errorUser("error while evaluating the formatting expression: "+e.getLocalizedMessage(), getClass(), e);
						progress.setComputationState(ComputationState.FINISHED_FAILURE);
						return;
					}
					
					/*
					// create ID
					String exportId = exportType+" "+(++j);
					agent2exportId.put(agent, exportId);
					
					// print the agent
					
					ps.print("\"");
					ps.print(exportId);
					ps.print("\" <- {class_");
					ps.print(exportType);
					ps.print(",[");
					
					boolean coma = false;
					for (Attribute attribute: type.getAllAttributes()) {
						if (coma)
							ps.print(",");
						else
							coma = true;
						ps.print(java2erlang(agent.getValueForAttribute(attribute)));
						
					}
					ps.print("]}.");
					ps.println();
					*/
					
					if (i%10 == 1) {
						
						progress.setProgressMade(i);
						// cancellation stop ?
						if (progress.getComputationState()==ComputationState.FINISHED_CANCEL)
							return;
						
					}
					i++;
				}
				
				ps.println();
				ps.println();
	
			}
			
			// TODO export links !
			
			// footer
			ps.println();
			ps.println();
			try {
				ps.println(jsParser.evaluate(footerTxt, messages, variablesInput));
			} catch (RuntimeException e) {
				messages.errorUser("error while evaluating the footer expression: "+e.getLocalizedMessage(), getClass(), e);
				progress.setComputationState(ComputationState.FINISHED_FAILURE);
				return;
			}
			
			
		} finally {
			ps.close();
		}
		
		// publish the file as a result
		result.setResult(WritePopulationForSimdiascaAlgo.OUTPUT_FILE, inputFile);
		
		progress.setComputationState(ComputationState.FINISHED_OK);
		
	}

	@Override
	public void cancel() {
		progress.setComputationState(ComputationState.FINISHED_CANCEL);
	}

	@Override
	public void kill() {
		progress.setComputationState(ComputationState.FINISHED_CANCEL);
	}

}
